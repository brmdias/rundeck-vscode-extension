- defaultTab: nodes
  description: Checks for any global/widespread issues specifically related to AWS.
  executionEnabled: true
  group: Extension
  id: 9a26736b-2b86-4aa4-bd98-6aae629dc01d
  loglevel: INFO
  name: Check for AWS Outages (scheduled)
  nodeFilterEditable: false
  plugins:
    ExecutionLifecycle: {}
  runnerSelector:
    runnerFilterMode: LOCAL
    runnerFilterType: LOCAL_RUNNER
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - description: Check AWS Status
      fileExtension: .py
      interpreterArgsQuoted: false
      plugins:
        LogFilter: []
      script: |-
        import sys
        import urllib.request
        import json

        def check_aws_status():
            aws_status_url = 'https://status.aws.amazon.com/data.json'
            try:
                response = urllib.request.urlopen(aws_status_url)
                content = response.read()
                data = json.loads(content)
            except urllib.error.URLError as e:
                print(f"Error fetching the AWS status: {e}")
                sys.exit(1)
            except json.JSONDecodeError as e:
                print(f"Error parsing the AWS status: {e}")
                sys.exit(1)

            # Check if the data is a list
            if isinstance(data, list):
                issues = []
                for event in data:
                    # Assuming each event is a dictionary with relevant keys
                    if event.get('status') != 'resolved':
                        issues.append({
                            'title': event.get('service', 'Unknown Service'),
                            'description': event.get('description', 'No description available'),
                            'date': event.get('date', 'No date available')
                        })

                if issues:
                    print("AWS Status Issues Detected:")
                    for issue in issues:
                        print(f"Service: {issue['title']}")
                        print(f"Description: {issue['description']}")
                        print(f"Date: {issue['date']}")
                        print("-----")
                    sys.exit(1)
                else:
                    print("No issues found in the AWS status feed.")
                    sys.exit(0)
            else:
                print("Unexpected data format received from AWS status feed.")
                sys.exit(1)

        if __name__ == "__main__":
            check_aws_status()
      scriptInterpreter: python
    - exec: echo hello world
    keepgoing: false
    strategy: node-first
  uuid: 9a26736b-2b86-4aa4-bd98-6aae629dc01d
